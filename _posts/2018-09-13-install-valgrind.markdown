#valgrind 的安装

1.去valgrind官网下载安装包，如3.13.0版本的安装包名字叫valgrind-3.13.0.tar.bz2

2.在linux上解压：
命令： tar jxvf valgrind-3.13.0.tar.bx2,于是同目录下就有了valgrind-3.13.0目录

3.按照目录中README文件提示安装：
1） cd valgrind-3.13.0
2) ./configure --prefix=/root/valgrind-3.13.0 （可以安装其他位置）
3） make
4) make install

4 添加valgrind到环境变量
1）vi ~/.bashrc

2) 在文件最后一行添加
  export PATH=$PARH:/root/valgrind-3.13.0/bin
  然后shift+Z+Z保存退出

3）命令行source ~/.bashrc提交修改

5 测试valgrind安装以及环境变量添加情况，命令行valgrind ls -l如果出现当前目录的信息则表示以上流程没有问题。

6 要在程序上运行Cachegrind，命令行
  valgrind --tool=cachegrind 你的程序名 以及你的程序的命令行参数

7 程序将执行（缓慢）。完成后将打印出如下的摘要统计信息：
== 31751 ==我参考：27,742,716
== 31751 == I1 misses：276
== 31751 == LLi misses：275
== 31751 == I1 miss rate：0.0％
== 31751 == LLi miss rate：0.0％
== == 31751
== 31751 == D refs：15,430,290（10,955,517 rd + 4,474,773 wr）
== 31751 == D1 misses：41,185（21,905 rd + 19,280 wr）
== 31751 == LLd misses：23,085（3,987 rd + 19,098 wr）
== 31751 == D1失误率：0.2％（0.1％+ 0.4％）
== 31751 ==差错率：0.1％（0.0％+ 0.4％）
== == 31751
== 31751 == LL misses：23,360（4,262 rd + 19,098 wr）
== 31751 == LL错失率：0.0％（0.0％+ 0.4％）

8 需要查看按行统计的数据
1）需要将运行程序带着调试信息进行编译
2）然后运行cachegrind得到out文件，使用cg_annotate打开，发现后面统计的文件函数列中有了详细的文件名信息。所以在cg_annotate 后添加你需要查看的详细文件名即可。

9 利用cachegrind知道优化的经验：
1）全局cache命中/不命中（hit/miss）总数的指导意义不大，如果你有多个版本的程序进行对比，或许能够得到发现某些数据出现了异常，并就此进行调查分析。不然不会提供太多线索。

2）函数统计。
  函数cache事件统计能够指出哪些函数引起了大量的cache不命中事件。需要注意的是内联函数的使用。如果一个函数f被内联，f的事件计数会被计入被内联进函数的统计中，然而如果你查看f函数的按行统计，你能够得到f函数的cache事件总数。所以函数统计需要与行统计一起查看来分析。

  3）行统计
  行统计总数最有用。从以前分析经验总结出：
  最好先查看Ir总数，这表明了对于此行代码，总共运行了多少次指令。这能够用以查找瓶颈。
  然后查看LL不命中总数，这相比于L1不命中，是运行缓慢的主要原因。所以需要筛选出具有高DLmr或者DLmw总数的代码片段。例如可以使用cg_annotate 时添加--show=DLmr --sort=Dlmr 选项 让我们只关注DLmr 。
  即是你找到这样的片段了，想要找到方式来明显改善性能还是比较难的。你需要非常了解cache是怎么工作的，以及局部性原则，以及程序的数据读取模式。一般需要重新设计数据结构才能提升性能。

  4）查看Bcm 以及Bim 也会有用。
  实际上Bim一般是switch引起的。有时候一些switch能够用table-driven 来代替。
